#!/usr/bin/env bash

# Distributed copy of a directory into an iRODS collection
# Christopher Harrison <ch12@sanger.ac.uk>

set -euo pipefail

BINARY="$(readlink -fn "$0")"
PROGNAME="$(basename "${BINARY}")"

# Maximum number of concurrent iputs
export IPUT_LIMIT="${IPUT_LIMIT-30}"

# Maximum number of elements in job array
export BSUB_LIMIT="${BSUB_LIMIT-300}"

stderr() {
  local message="$*"

  if [[ -t 2 ]]; then
    message="\033[0;31m${message}\033[0m"
  fi

  >&2 echo -e "${message}"
}

usage() {
  cat <<-EOF
	Usage: ${PROGNAME} /your/source/directory /target/irods/collection
	EOF
}

strip_prefix() {
  local prefix="$1"
  local data="$2"
  echo "${data#${prefix}}"
}

main() {
  local mode="$1"

  case "${mode}" in
    "__setup")
      local source_dir="$2"
      local dest_coll="$3"

      get_manifest() {
        # Find files of a given type in the source directory, excluding
        # the .imirror directory we created for keeping state
        # FIXME This will break horribly for files with \n in their names
        local type="$1"
        find "${source_dir}" \
             -mindepth 1 \
             -path "${source_dir}/.imirror" -prune \
             -o -type "${type}" -print
      }

      # Generate manifest
      echo "Generating manifest..."
      local manifest_dir="${source_dir}/.imirror/manifest"
      mkdir -p "${manifest_dir}"
      get_manifest d > "${manifest_dir}/dirs"
      get_manifest f | split -da4 -n "r/${BSUB_LIMIT}" - "${manifest_dir}/files."

      # Create subcollections
      echo "Mirroring directory structure on iRODS..."
      local subdir
      local subcoll
      while IFS= read -r subdir; do
        subcoll="${dest_coll}/$(strip_prefix "${source_dir}/" "${subdir}")"
        imkdir -p "${subcoll}"
      done < "${manifest_dir}/dirs"

      echo "Submitting distributed copy jobs..."
      local log_dir="${source_dir}/.imirror/logs"
      bsub -q normal \
           -G hgi \
           -M 1000 \
           -R "select[mem>1000] rusage[mem=1000]" \
           -J "imirror${RANDOM}[1-${BSUB_LIMIT}]%${IPUT_LIMIT}" \
           -o "${log_dir}/copy.%I.log" -e "${log_dir}/copy.%I.log" \
           "${BINARY}" __copy "${source_dir}" "${dest_coll}"
      ;;

    "__copy")
      local source_dir="$2"
      local dest_coll="$3"

      local -i manifest_id="$(( LSB_JOBINDEX - 1 ))"
      local manifest="$(printf "${source_dir}/.imirror/manifest/files.%04d" "${manifest_id}")"

      echo "Beginning file copy..."
      local source_file
      local dest_file
      while IFS= read -r source_file; do
        dest_file="${dest_coll}/$(strip_prefix "${source_dir}/" "${source_file}")"
        echo "Uploading ${source_file} to ${dest_file}"
        iput -K "${source_file}" "${dest_file}"
      done < "${manifest}"

      echo "Done"
      ;;

    *)
      if ! (( $# == 2 )); then
        stderr "Invalid arguments!"
        usage
        exit 1
      fi

      local source_dir="$(readlink -fn "$1")"
      local dest_coll="$2"

      if ! [[ -d "${source_dir}" ]]; then
        stderr "Source directory does not exist!"
        usage
        exit 1
      fi

      # TODO Feature: Check destination collection exists...somehow

      if [[ -d "${source_dir}/.imirror" ]]; then
        stderr ".imirror directory already exists at source; delete this and try again!"
        exit 1
      fi

      echo "Submitting job..."
      local log_dir="${source_dir}/.imirror/logs"
      mkdir -p "${log_dir}"
      bsub -q normal \
           -G hgi \
           -M 1000 \
           -R "select[mem>1000] rusage[mem=1000]" \
           -o "${log_dir}/setup.log" -e "${log_dir}/setup.log" \
           "${BINARY}" __setup "${source_dir}" "${dest_coll}"
      ;;
  esac
}

main "${@-}"
